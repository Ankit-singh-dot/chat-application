// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(cuid())
  phoneNumber    String?            @unique
  phoneSuffix    String?
  userName       String?
  email          String?             @unique
  emailOtp       String?
  emailOtpExpiry DateTime?
  profilePicture String?
  about          String?
  lastSeen       DateTime?
  isOnline       Boolean            @default(false)
  isVerified     Boolean            @default(false)
  agreed         Boolean            @default(false)
  createdAt      DateTime           @default(now())
  conversations  ConversationUser[]
  messages       Message[]
  Conversation   Conversation[]
  Reaction       Reaction[]
  MessageStatus  MessageStatus[]
}

model Conversation {
  id           String             @id @default(cuid())
  isGroup      Boolean            @default(false)
  name         String?
  createdAt    DateTime           @default(now())
  participants ConversationUser[]
  messages     Message[]
  adminId      String
  admin        User?              @relation(fields: [adminId], references: [id])
}

model ConversationUser {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  joinedAt       DateTime     @default(now())

  @@unique([userId, conversationId])
}

model Message {
  id              String          @id @default(cuid())
  content         String
  imageOrvideoUrl String?
  contentType     String
  reactions       String[]        @default([])
  createdAt       DateTime        @default(now())
  seen            Boolean         @default(false)
  senderId        String
  sender          User            @relation(fields: [senderId], references: [id])
  conversationId  String
  conversation    Conversation    @relation(fields: [conversationId], references: [id])
  messageStatus   MessageStatus[]
  Reaction        Reaction[]
}

enum ContentType {
  TEXT
  IMAGE
  VIDEO
}

model Reaction {
  id        String       @id @default(cuid())
  typeId    String
  type      ReactionType @relation(fields: [typeId], references: [id])
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  messageId String
  message   Message      @relation(fields: [messageId], references: [id])
  reactedAt DateTime     @default(now())

  @@unique([userId, messageId])
}

model ReactionType {
  id        String     @id @default(cuid())
  label     String     @unique
  icon      String?
  reactions Reaction[]
}

model MessageStatus {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  status    Status   @default(SENT)
  updatedAt DateTime @updatedAt

  @@unique([messageId, userId])
}

enum Status {
  SENT
  DELIVERED
  SEEN
}
